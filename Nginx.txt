   Nginx
__________

Nginx is a high-performance web server and reverse proxy server. It is known for its ability to handle a large number of simultaneous connections efficiently, making it ideal for high-traffic websites. In addition to serving static files and load balancing, Nginx is often used as a reverse proxy for web applications.


Why Use Nginx with Django :-
----------------------------

1. Performance: Nginx is capable of handling a high number of concurrent connections, making it suitable for high-traffic websites.
2. Reverse Proxy: Acts as an intermediate, forwarding requests from clients to backend servers (like Gunicorn running Django) and then returning the server's responses to the clients.
3. Load Balancing: Distributes incoming traffic across multiple backend servers to ensure no single server is overwhelmed.
4. Static File Serving: Efficiently serves static files (like CSS, JavaScript, and images) directly to clients, reducing the load on the Django application.
5. Security: Offers features like SSL termination, which secures communication between clients and your server.


Workflow :-
-----------

1. Client: Sends an HTTP request to the server.
2. Nginx: Receives the request and checks if it's for a static file (like an image or CSS file).
	a. If it's a static file, Nginx serves it directly from the file system.
	b. If it's a dynamic request, Nginx forwards it to Gunicorn.
3. Gunicorn: Processes the request using the Django application.
4. Django: Handles the request, accessing the database if necessary, and returns a response.
5. Gunicorn: Sends the response back to Nginx.
6. Nginx: Forwards the response to the client.


What is Reverse Proxy?
----------------------
A reverse proxy is a server that sits between client devices and backend servers, forwarding client requests to the appropriate backend server and then returning the server's response to the client. This setup can provide several benefits, including load balancing, improved security, and caching. Nginx is a reverse proxy server.


What is Load Balancing?
-----------------------
Load balancing is the process of distributing incoming network traffic across multiple servers to ensure that no single server becomes overwhelmed.

	how to Balance Requests?
	------------------------
	Define the backend servers in upstream block. The nginx will distribute the incoming request those servers in the upstream block.

	How to define upstream block?
	-----------------------------
	upstream my_app {
		server 127.0.0.1:8001;
		server 127.0.0.1:8002;
		server 127.0.0.1:8003;
	}
	NB:- instead of my_app you can give any name, that name is representing the group of servers that your using for load balancing.


What is Location block?
----------------------------------------
In the location block it defines that how nginx should process the requests for specified URI(Uniform Resource Identifier) path. It allows you to configure URI for serving static files etc...

	How it works?
	-------------
	location /static/ {
        	root /home/ubuntu/<project_directory>/<project_folder>/static/;
    	}
	This is a location block is used for serving static files directly by nginx.

	The working is :-
		- if the request matches with "/static/"
		- it then use the root directory to determine the absolute path to the file requested.
		- then nginx directly serve the file to the client from the filesystem without involving any backend sever like Gunicorn.
